name: vercel

env:
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

defaults:
  run:
    shell: bash

on:
  # Uncomment to allow contributors to trigger Vercel deployments via push to the main branch
  # Note: Before enabling, set `"github": { "enabled": false }` in vercel.json to disable Vercel's GitHub integration
  # disable
  #   branches: [main]
  # workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  should-deploy:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    outputs:
      should_deploy: ${{ steps.set.outputs.should_deploy }}
    steps:
      - name: Fail if required env vars are missing
        run: |
          if [ -z "$VERCEL_TOKEN" ] || [ -z "$VERCEL_ORG_ID" ] || [ -z "$VERCEL_PROJECT_ID" ]; then
            echo "One or more required environment variables are missing."
            exit 1
          fi

      - uses: actions/checkout@v4
        if: github.event_name != 'workflow_dispatch'
        with:
          fetch-depth: 0

      - if: github.event_name != 'workflow_dispatch'
        uses: tj-actions/changed-files@main
        id: changed_files
        with:
          since_last_remote_commit: true
          files: |
            .github/**
            pnpm-lock.yaml
            **/package.json
            apps/website/**

      - id: set
        run: echo "should_deploy=${{ github.event_name == 'workflow_dispatch' || steps.changed_files.outputs.any_changed == 'true' }}" >> $GITHUB_OUTPUT

  deploy-vercel:
    runs-on: ubuntu-latest
    needs: should-deploy
    if: needs.should-deploy.outputs.should_deploy == 'true'
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - run: npm install -g vercel@latest

      - run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
